"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[13],{4343:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var t=i(4848),s=i(8453);const o={id:"troubleshooting",title:"Troubleshooting",type:"recipe"},r="Troubleshooting",l={id:"troubleshooting",title:"Troubleshooting",description:"This document contains solutions for certain issues our users encountered",source:"@site/docs/troubleshooting.md",sourceDirName:".",slug:"/troubleshooting",permalink:"/docs/troubleshooting",draft:!1,unlisted:!1,editUrl:"https://github.com/lerna/lerna/tree/main/website/docs/troubleshooting.md",tags:[],version:"current",frontMatter:{id:"troubleshooting",title:"Troubleshooting",type:"recipe"},sidebar:"main",previous:{title:"Lerna 6: Obsolete Options",permalink:"/docs/lerna6-obsolete-options"}},a={},c=[{value:"Import Command",id:"import-command",level:2},{value:"Buffer problems during import",id:"buffer-problems-during-import",level:3},{value:"Solution:",id:"solution",level:4},{value:"Merge conflict commits cannot be imported",id:"merge-conflict-commits-cannot-be-imported",level:3},{value:"Solution",id:"solution-1",level:4},{value:"Failing when git tree has uncommitted changes",id:"failing-when-git-tree-has-uncommitted-changes",level:3},{value:"Solution",id:"solution-2",level:4},{value:"Publish Command",id:"publish-command",level:2},{value:"Publish does not detect manually created tags in fixed mode with Github/Github Enterprise",id:"publish-does-not-detect-manually-created-tags-in-fixed-mode-with-githubgithub-enterprise",level:3},{value:"Solution:",id:"solution-3",level:4},{value:"Publishing to a private npm registry (Artifactory, npm Enterprise, etc)",id:"publishing-to-a-private-npm-registry-artifactory-npm-enterprise-etc",level:3},{value:"Jest / Visual Studio Code Debugging",id:"jest--visual-studio-code-debugging",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"troubleshooting",children:"Troubleshooting"})}),"\n",(0,t.jsx)(n.p,{children:"This document contains solutions for certain issues our users encountered\nin the past while using Lerna."}),"\n",(0,t.jsx)(n.h2,{id:"import-command",children:"Import Command"}),"\n",(0,t.jsx)(n.h3,{id:"buffer-problems-during-import",children:"Buffer problems during import"}),"\n",(0,t.jsx)(n.p,{children:"When you try to import a repository which has many commits in it there is a\nchance that you get an error such as:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"DeprecationWarning: Unhandled promise rejections are deprecated\n"})}),"\n",(0,t.jsx)(n.p,{children:"or"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Error: spawnSync /bin/sh ENOBUFS during ImportCommand.execute\n"})}),"\n",(0,t.jsx)(n.h4,{id:"solution",children:"Solution:"}),"\n",(0,t.jsxs)(n.p,{children:["Run ",(0,t.jsx)(n.code,{children:"lerna import"})," with the ",(0,t.jsx)(n.code,{children:"--max-buffer"})," flag and provide a large enough\nnumber (in bytes). At the writing of this entry the underlying default is\n10MB, so you should keep this in mind."]}),"\n",(0,t.jsx)(n.h3,{id:"merge-conflict-commits-cannot-be-imported",children:"Merge conflict commits cannot be imported"}),"\n",(0,t.jsx)(n.p,{children:"When you try to import a repository that contains merge commits that needed\nconflict resolutions, the import command fails with an error:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"lerna ERR! execute Error: Command failed: git am -3\nlerna ERR! execute error: Failed to merge in the changes.\nlerna ERR! execute CONFLICT (content): Merge conflict in [file]\n"})}),"\n",(0,t.jsx)(n.h4,{id:"solution-1",children:"Solution"}),"\n",(0,t.jsxs)(n.p,{children:["Run ",(0,t.jsx)(n.code,{children:"lerna import"})," with the ",(0,t.jsx)(n.code,{children:"--flatten"}),' flag to import the history in "flat"\nmode, i.e. with each merge commit as a single change the merge introduced.']}),"\n",(0,t.jsx)(n.h3,{id:"failing-when-git-tree-has-uncommitted-changes",children:"Failing when git tree has uncommitted changes"}),"\n",(0,t.jsxs)(n.p,{children:["You will receive ",(0,t.jsx)(n.code,{children:"fatal: ambiguous argument 'HEAD':"})," error, when the current project has ",(0,t.jsx)(n.strong,{children:"uncommitted changes"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"solution-2",children:"Solution"}),"\n",(0,t.jsxs)(n.p,{children:["Make sure to commit all the changes you have in your lerna project, before importing any packages using ",(0,t.jsx)(n.code,{children:"lerna import"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"publish-command",children:"Publish Command"}),"\n",(0,t.jsx)(n.h3,{id:"publish-does-not-detect-manually-created-tags-in-fixed-mode-with-githubgithub-enterprise",children:"Publish does not detect manually created tags in fixed mode with Github/Github Enterprise"}),"\n",(0,t.jsxs)(n.p,{children:["Github and Github Enterprise use lightweight Git tags when a release is created through the ",(0,t.jsx)(n.a,{href:"https://help.github.com/articles/working-with-tags",children:"web ui"}),",\nwhile Lerna uses annotated tags."]}),"\n",(0,t.jsx)(n.p,{children:"This can cause an issue where Lerna will ignore previously published releases which have been manually performed and\ntagged with the Github web ui."}),"\n",(0,t.jsx)(n.p,{children:"For example if the publish history was as follows:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["v1.1.0 was published and tagged with ",(0,t.jsx)(n.code,{children:"lerna publish"})]}),"\n",(0,t.jsx)(n.li,{children:"v1.2.0 was manually published and tagged with the Github web ui"}),"\n",(0,t.jsx)(n.li,{children:"v1.2.1 was manually published and tagged with the Github web ui"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Running ",(0,t.jsx)(n.code,{children:"lerna publish"})," now would detect v1.1.0 instead of v1.2.1 as the last released tag."]}),"\n",(0,t.jsxs)(n.p,{children:["The implications of this depends on your usage of ",(0,t.jsx)(n.code,{children:"lerna publish"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The publish prompt would use v1.1.0 as the base for major/minor/patch suggestions."}),"\n",(0,t.jsxs)(n.li,{children:["When using the ",(0,t.jsx)(n.code,{children:"--conventional-commits"})," flag:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"would suggest a semver increment based on all the commits since v1.1.0 (including commits from v1.2.0, v1.2.1 etc)"}),"\n",(0,t.jsx)(n.li,{children:"The generated CHANGELOG.md files will repeat all the commits that have already been released in v1.2.0, v1.2.1 etc"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"solution-3",children:"Solution:"}),"\n",(0,t.jsxs)(n.p,{children:["If possible, use ",(0,t.jsx)(n.code,{children:"lerna publish"})," over manual releases."]}),"\n",(0,t.jsxs)(n.p,{children:["For new manual releases, use ",(0,t.jsx)(n.code,{children:"git tag -a -m <version>"})," instead of using the Github web ui."]}),"\n",(0,t.jsx)(n.p,{children:"For existing lightweight tags, they can be converted to an annotated tag using something like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:'GIT_AUTHOR_NAME="$(git show $1 --format=%aN -s)"\nGIT_AUTHOR_EMAIL="$(git show $1 --format=%aE -s)"\nGIT_AUTHOR_DATE="$(git show $1 --format=%aD -s)"\nGIT_COMMITTER_NAME="$(git show $1 --format=%cN -s)"\nGIT_COMMITTER_EMAIL="$(git show $1 --format=%cE -s)"\nGIT_COMMITTER_DATE="$(git show $1 --format=%cD -s)"\n\ngit tag -a -m $1 -f $1 $1\n\ngit push --tags --force\n'})}),"\n",(0,t.jsxs)(n.p,{children:["See this ",(0,t.jsx)(n.a,{href:"https://stackoverflow.com/questions/5002555/can-a-lightweight-tag-be-converted-to-an-annotated-tag",children:"Stackoverflow post"})," for more details"]}),"\n",(0,t.jsx)(n.h3,{id:"publishing-to-a-private-npm-registry-artifactory-npm-enterprise-etc",children:"Publishing to a private npm registry (Artifactory, npm Enterprise, etc)"}),"\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.code,{children:"lerna publish"})," is failing ensure you have the following your ",(0,t.jsx)(n.code,{children:"package.json"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'\t"publishConfig": {\n\t\t"registry": "https://[registry-url]"\n\t}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You may also need to add the following to your ",(0,t.jsx)(n.code,{children:".npmrc"})," file on the individual package(s):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"registry = https://[registry-url]\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Lerna always uses ",(0,t.jsx)(n.code,{children:"npm"})," tooling to publish packages, regardless of the ",(0,t.jsx)(n.code,{children:"npmClient"})," set in the ",(0,t.jsx)(n.code,{children:"lerna.json"})," file. This means that any ",(0,t.jsx)(n.code,{children:"yarn"})," or ",(0,t.jsx)(n.code,{children:"pnpm"})," configuration will not be detected. To ensure successful publishing to a private registry, make sure that ",(0,t.jsx)(n.code,{children:"npm"})," is configured properly with environment variables or a ",(0,t.jsx)(n.code,{children:".npmrc"})," file."]})}),"\n",(0,t.jsx)(n.h2,{id:"jest--visual-studio-code-debugging",children:"Jest / Visual Studio Code Debugging"}),"\n",(0,t.jsxs)(n.p,{children:["It is possible to debug ",(0,t.jsx)(n.a,{href:"https://facebook.github.io/jest/",children:"Jest"})," tests in a Lerna-managed package using ",(0,t.jsx)(n.a,{href:"https://code.visualstudio.com/",children:"Visual Studio Code"}),". Debugging with breakpoints works with the vscode launch configuration below in the monorepo's ",(0,t.jsx)(n.code,{children:"<root>/.vscode/launch.json"})," file. This example launches Jest for a single package ",(0,t.jsx)(n.code,{children:"my-package"})," located in the monorepo."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'{\n    "name": "Jest my-package",\n    "type": "node",\n    "request": "launch",\n    "address": "localhost",\n    "protocol": "inspector",\n    "runtimeExecutable": "${workspaceRoot}/node_modules/.bin/lerna",\n    "runtimeArgs": [\n        "exec",\n        "--scope",\n        "my-package",\n        "--",\n        "node"\n    ],\n    "args": [\n        "${workspaceRoot}/node_modules/jest/bin/jest.js",\n        "--runInBand",\n        "--no-cache",\n        "packages/my-package"\n    ]\n}\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://facebook.github.io/jest/docs/en/cli.html#runinband",children:(0,t.jsx)(n.code,{children:"--runInBand"})})," avoids parallelizing tests across multiple processes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://facebook.github.io/jest/docs/en/cli.html#cache",children:(0,t.jsx)(n.code,{children:"--no-cache"})})," helps avoid caching issues"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Tested with Visual Studio Code v1.19.3 and Jest v22.1.4."})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(6540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);