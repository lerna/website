"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[360],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),d=a,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||o;return n?i.createElement(h,r(r({ref:t},p),{},{components:n})):i.createElement(h,r({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var u=2;u<o;u++)r[u]=n[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9222:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var i=n(7462),a=(n(7294),n(3905));const o={id:"troubleshooting",title:"Troubleshooting",type:"recipe"},r="Troubleshooting",l={unversionedId:"troubleshooting",id:"troubleshooting",title:"Troubleshooting",description:"This document contains solutions for certain issues our users encountered",source:"@site/docs/troubleshooting.md",sourceDirName:".",slug:"/troubleshooting",permalink:"/docs/troubleshooting",draft:!1,editUrl:"https://github.com/lerna/lerna/tree/main/website/docs/troubleshooting.md",tags:[],version:"current",frontMatter:{id:"troubleshooting",title:"Troubleshooting",type:"recipe"},sidebar:"main",previous:{title:"Lerna 6: Obsolete Options",permalink:"/docs/lerna6-obsolete-options"}},s={},u=[{value:"Import Command",id:"import-command",level:2},{value:"Buffer problems during import",id:"buffer-problems-during-import",level:3},{value:"Solution:",id:"solution",level:4},{value:"Merge conflict commits cannot be imported",id:"merge-conflict-commits-cannot-be-imported",level:3},{value:"Solution",id:"solution-1",level:4},{value:"Failing when git tree has uncommitted changes",id:"failing-when-git-tree-has-uncommitted-changes",level:3},{value:"Solution",id:"solution-2",level:4},{value:"Publish Command",id:"publish-command",level:2},{value:"Publish does not detect manually created tags in fixed mode with Github/Github Enterprise",id:"publish-does-not-detect-manually-created-tags-in-fixed-mode-with-githubgithub-enterprise",level:3},{value:"Solution:",id:"solution-3",level:4},{value:"Publishing to a private npm registry (Artifactory, npm Enterprise, etc)",id:"publishing-to-a-private-npm-registry-artifactory-npm-enterprise-etc",level:3},{value:"Jest / Visual Studio Code Debugging",id:"jest--visual-studio-code-debugging",level:2}],p={toc:u};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"troubleshooting"},"Troubleshooting"),(0,a.kt)("p",null,"This document contains solutions for certain issues our users encountered\nin the past while using Lerna."),(0,a.kt)("h2",{id:"import-command"},"Import Command"),(0,a.kt)("h3",{id:"buffer-problems-during-import"},"Buffer problems during import"),(0,a.kt)("p",null,"When you try to import a repository which has many commits in it there is a\nchance that you get an error such as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"DeprecationWarning: Unhandled promise rejections are deprecated\n")),(0,a.kt)("p",null,"or"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Error: spawnSync /bin/sh ENOBUFS during ImportCommand.execute\n")),(0,a.kt)("h4",{id:"solution"},"Solution:"),(0,a.kt)("p",null,"Run ",(0,a.kt)("inlineCode",{parentName:"p"},"lerna import")," with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--max-buffer")," flag and provide a large enough\nnumber (in bytes). At the writing of this entry the underlying default is\n10MB, so you should keep this in mind."),(0,a.kt)("h3",{id:"merge-conflict-commits-cannot-be-imported"},"Merge conflict commits cannot be imported"),(0,a.kt)("p",null,"When you try to import a repository that contains merge commits that needed\nconflict resolutions, the import command fails with an error:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"lerna ERR! execute Error: Command failed: git am -3\nlerna ERR! execute error: Failed to merge in the changes.\nlerna ERR! execute CONFLICT (content): Merge conflict in [file]\n")),(0,a.kt)("h4",{id:"solution-1"},"Solution"),(0,a.kt)("p",null,"Run ",(0,a.kt)("inlineCode",{parentName:"p"},"lerna import")," with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--flatten"),' flag to import the history in "flat"\nmode, i.e. with each merge commit as a single change the merge introduced.'),(0,a.kt)("h3",{id:"failing-when-git-tree-has-uncommitted-changes"},"Failing when git tree has uncommitted changes"),(0,a.kt)("p",null,"You will receive ",(0,a.kt)("inlineCode",{parentName:"p"},"fatal: ambiguous argument 'HEAD':")," error, when the current project has ",(0,a.kt)("strong",{parentName:"p"},"uncommitted changes"),"."),(0,a.kt)("h4",{id:"solution-2"},"Solution"),(0,a.kt)("p",null,"Make sure to commit all the changes you have in your lerna project, before importing any packages using ",(0,a.kt)("inlineCode",{parentName:"p"},"lerna import"),"."),(0,a.kt)("h2",{id:"publish-command"},"Publish Command"),(0,a.kt)("h3",{id:"publish-does-not-detect-manually-created-tags-in-fixed-mode-with-githubgithub-enterprise"},"Publish does not detect manually created tags in fixed mode with Github/Github Enterprise"),(0,a.kt)("p",null,"Github and Github Enterprise use lightweight Git tags when a release is created through the ",(0,a.kt)("a",{parentName:"p",href:"https://help.github.com/articles/working-with-tags"},"web ui"),",\nwhile Lerna uses annotated tags."),(0,a.kt)("p",null,"This can cause an issue where Lerna will ignore previously published releases which have been manually performed and\ntagged with the Github web ui."),(0,a.kt)("p",null,"For example if the publish history was as follows:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"v1.1.0 was published and tagged with ",(0,a.kt)("inlineCode",{parentName:"li"},"lerna publish")),(0,a.kt)("li",{parentName:"ul"},"v1.2.0 was manually published and tagged with the Github web ui"),(0,a.kt)("li",{parentName:"ul"},"v1.2.1 was manually published and tagged with the Github web ui")),(0,a.kt)("p",null,"Running ",(0,a.kt)("inlineCode",{parentName:"p"},"lerna publish")," now would detect v1.1.0 instead of v1.2.1 as the last released tag."),(0,a.kt)("p",null,"The implications of this depends on your usage of ",(0,a.kt)("inlineCode",{parentName:"p"},"lerna publish"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The publish prompt would use v1.1.0 as the base for major/minor/patch suggestions."),(0,a.kt)("li",{parentName:"ul"},"When using the ",(0,a.kt)("inlineCode",{parentName:"li"},"--conventional-commit")," flag:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"would suggest a semver increment based on all the commits since v1.1.0 (including commits from v1.2.0, v1.2.1 etc)"),(0,a.kt)("li",{parentName:"ul"},"The generated CHANGELOG.md files will repeat all the commits that have already been released in v1.2.0, v1.2.1 etc")))),(0,a.kt)("h4",{id:"solution-3"},"Solution:"),(0,a.kt)("p",null,"If possible, use ",(0,a.kt)("inlineCode",{parentName:"p"},"lerna publish")," over manual releases."),(0,a.kt)("p",null,"For new manual releases, use ",(0,a.kt)("inlineCode",{parentName:"p"},"git tag -a -m <version>")," instead of using the Github web ui."),(0,a.kt)("p",null,"For existing lightweight tags, they can be converted to an annotated tag using something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'GIT_AUTHOR_NAME="$(git show $1 --format=%aN -s)"\nGIT_AUTHOR_EMAIL="$(git show $1 --format=%aE -s)"\nGIT_AUTHOR_DATE="$(git show $1 --format=%aD -s)"\nGIT_COMMITTER_NAME="$(git show $1 --format=%cN -s)"\nGIT_COMMITTER_EMAIL="$(git show $1 --format=%cE -s)"\nGIT_COMMITTER_DATE="$(git show $1 --format=%cD -s)"\n\ngit tag -a -m $1 -f $1 $1\n\ngit push --tags --force\n')),(0,a.kt)("p",null,"See this ",(0,a.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/5002555/can-a-lightweight-tag-be-converted-to-an-annotated-tag"},"Stackoverflow post")," for more details"),(0,a.kt)("h3",{id:"publishing-to-a-private-npm-registry-artifactory-npm-enterprise-etc"},"Publishing to a private npm registry (Artifactory, npm Enterprise, etc)"),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"lerna publish")," is failing ensure you have the following your ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'    "publishConfig": {\n        "registry": "https://[registry-url]"\n    }\n')),(0,a.kt)("p",null,"You may also need to add the following to your ",(0,a.kt)("inlineCode",{parentName:"p"},".npmrc")," file on the individual package(s):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"registry = https://[registry-url]\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Lerna always uses ",(0,a.kt)("inlineCode",{parentName:"p"},"npm")," tooling to publish packages, regardless of the ",(0,a.kt)("inlineCode",{parentName:"p"},"npmClient")," set in the ",(0,a.kt)("inlineCode",{parentName:"p"},"lerna.json")," file. This means that any ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"pnpm")," configuration will not be detected. To ensure successful publishing to a private registry, make sure that ",(0,a.kt)("inlineCode",{parentName:"p"},"npm")," is configured properly with environment variables or a ",(0,a.kt)("inlineCode",{parentName:"p"},".npmrc")," file.")),(0,a.kt)("h2",{id:"jest--visual-studio-code-debugging"},"Jest / Visual Studio Code Debugging"),(0,a.kt)("p",null,"It is possible to debug ",(0,a.kt)("a",{parentName:"p",href:"https://facebook.github.io/jest/"},"Jest")," tests in a Lerna-managed package using ",(0,a.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/"},"Visual Studio Code"),". Debugging with breakpoints works with the vscode launch configuration below in the monorepo's ",(0,a.kt)("inlineCode",{parentName:"p"},"<root>/.vscode/launch.json")," file. This example launches Jest for a single package ",(0,a.kt)("inlineCode",{parentName:"p"},"my-package")," located in the monorepo."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n    "name": "Jest my-package",\n    "type": "node",\n    "request": "launch",\n    "address": "localhost",\n    "protocol": "inspector",\n    "runtimeExecutable": "${workspaceRoot}/node_modules/.bin/lerna",\n    "runtimeArgs": [\n        "exec",\n        "--scope",\n        "my-package",\n        "--",\n        "node"\n    ],\n    "args": [\n        "${workspaceRoot}/node_modules/jest/bin/jest.js",\n        "--runInBand",\n        "--no-cache",\n        "packages/my-package"\n    ]\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://facebook.github.io/jest/docs/en/cli.html#runinband"},(0,a.kt)("inlineCode",{parentName:"a"},"--runInBand"))," avoids parallelizing tests across multiple processes"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://facebook.github.io/jest/docs/en/cli.html#cache"},(0,a.kt)("inlineCode",{parentName:"a"},"--no-cache"))," helps avoid caching issues")),(0,a.kt)("p",null,"Tested with Visual Studio Code v1.19.3 and Jest v22.1.4."))}m.isMDXComponent=!0}}]);