"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[162],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9390:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={id:"getting-started",title:"Getting Started",type:"tutorial"},l="Getting Started",o={unversionedId:"getting-started",id:"getting-started",title:"Getting Started",description:"You can incrementally adopt Lerna for existing monorepos or create a new Lerna workspace by running:",source:"@site/docs/getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/docs/getting-started",draft:!1,editUrl:"https://github.com/lerna/lerna/tree/main/website/docs/getting-started.md",tags:[],version:"current",frontMatter:{id:"getting-started",title:"Getting Started",type:"tutorial"},sidebar:"main",previous:{title:"Introduction",permalink:"/docs/introduction"},next:{title:"Lerna and Nx",permalink:"/docs/lerna-and-nx"}},s={},p=[{value:"Adding Lerna",id:"adding-lerna",level:2},{value:"Package Dependency Management",id:"package-dependency-management",level:2},{value:"Visualizing the Workspace",id:"visualizing-the-workspace",level:2},{value:"Building All Projects",id:"building-all-projects",level:2},{value:"Testing All Projects",id:"testing-all-projects",level:2},{value:"Caching",id:"caching",level:2},{value:"Target Dependencies (aka task pipelines)",id:"target-dependencies-aka-task-pipelines",level:2},{value:"Publishing",id:"publishing",level:2}],c={toc:p};function d(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started"},"Getting Started"),(0,r.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/1oxFYphTS4Y",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; fullscreen",allowfullscreen:!0}),(0,r.kt)("p",null,"You can incrementally adopt Lerna for existing monorepos or create a new Lerna workspace by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx lerna init\n")),(0,r.kt)("p",null,"All Lerna functionality will work the same way regardless."),(0,r.kt)("p",null,"This tutorial will give you an introduction to Lerna's features. To get started with the tutorial, clone ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/lerna/getting-started-example"},"this repository"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," branch contains the final setup. If you want to follow along, please checkout the ",(0,r.kt)("inlineCode",{parentName:"p"},"prelerna")," branch."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/lerna/getting-started-example.git\ncd getting-started-example\ngit checkout prelerna\nnpm install\n")),(0,r.kt)("p",null,"The repo contains three packages or projects:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"header")," (a library of React components)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"footer")," (a library of React components)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"remixapp")," (an app written using the Remix framework which depends on both ",(0,r.kt)("inlineCode",{parentName:"li"},"header")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"footer"),")")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"packages/\n    header/\n        src/\n            ...\n        package.json\n        rollup.config.json\n        jest.config.js\n\n    footer/\n        src/\n            ...\n        package.json\n        rollup.config.json\n        jest.config.js\n\n    remixapp/\n        app/\n            ...\n        public/\n        package.json\n        remix.config.js\n\npackage.json\n")),(0,r.kt)("h2",{id:"adding-lerna"},"Adding Lerna"),(0,r.kt)("p",null,"To add Lerna run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx lerna@latest init\n")),(0,r.kt)("p",null,"This will"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"add ",(0,r.kt)("inlineCode",{parentName:"li"},"lerna")," to the root ",(0,r.kt)("inlineCode",{parentName:"li"},"package.json")),(0,r.kt)("li",{parentName:"ul"},"generate a ",(0,r.kt)("inlineCode",{parentName:"li"},"lerna.json")),(0,r.kt)("li",{parentName:"ul"},"configure a npm/yarn/pnpm workspace")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "name": "root",\n  "private": true,\n  "workspaces": ["packages/*"],\n  "devDependencies": {\n    "lerna": "6.0.1"\n  }\n}\n')),(0,r.kt)("p",null,"What makes Lerna 5.1+ so powerful is the task delegation and other features that come with its integration\nwith ",(0,r.kt)("a",{parentName:"p",href:"https://nx.dev"},"Nx"),"."),(0,r.kt)("h2",{id:"package-dependency-management"},"Package Dependency Management"),(0,r.kt)("p",null,"When running ",(0,r.kt)("inlineCode",{parentName:"p"},"lerna init"),", Lerna configures the workspace to use NPM/YARN/PNPM workspaces, the built-in solution for local referencing of packages. In this tutorial, in particular, we are leveraging ",(0,r.kt)("a",{parentName:"p",href:"https://docs.npmjs.com/cli/using-npm/workspaces"},"NPM workspaces"),"."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Lerna has historically its own dependency management solution: ",(0,r.kt)("inlineCode",{parentName:"p"},"lerna bootstrap"),'. This was required because at the time when Lerna was first released, there were no native solutions available. Nowadays the modern package managers come with a built-in "workspaces" solution, so it is highly recommended to go with that instead. ',(0,r.kt)("inlineCode",{parentName:"p"},"lerna bootstrap")," and other related commands will be officially deprecated in Lerna v7. See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/lerna/lerna/discussions/3410"},"https://github.com/lerna/lerna/discussions/3410"))),(0,r.kt)("p",null,"You can see this configured in the root-level ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," ",(0,r.kt)("inlineCode",{parentName:"p"},"workspaces")," property as well as by having ",(0,r.kt)("inlineCode",{parentName:"p"},"useWorkspaces")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"lerna.json")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "name": "root",\n  ...\n  "workspaces": [\n    "packages/*"\n  ],\n  ...\n}\n')),(0,r.kt)("p",null,"To see how it works, let's for example inspect the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file of ",(0,r.kt)("inlineCode",{parentName:"p"},"remixapp"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="packages/remixapp/package.json"',title:'"packages/remixapp/package.json"'},'{\n  ...\n  "dependencies": {\n    ...\n    "header": "*",\n    "footer": "*"\n  }\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},'"header": "*"')," and ",(0,r.kt)("inlineCode",{parentName:"p"},'"footer": "*"')," tell Lerna to link the contents of the ",(0,r.kt)("inlineCode",{parentName:"p"},"header")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"footer")," as if they were published to the registry. Make sure to run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install\n")),(0,r.kt)("p",null,"Now all the projects in the workspace can properly reference each other via local package linking."),(0,r.kt)("h2",{id:"visualizing-the-workspace"},"Visualizing the Workspace"),(0,r.kt)("p",null,"Since Lerna is powered by Nx, you can use its capabilities to open an interactive visualization of the workspace project graph."),(0,r.kt)("p",null,"To open the visualization, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx nx graph\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Project Graph",src:n(3749).Z,width:"3094",height:"1772"})),(0,r.kt)("h2",{id:"building-all-projects"},"Building All Projects"),(0,r.kt)("p",null,"To build all projects, run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx lerna run build\n")),(0,r.kt)("p",null,"This builds the three projects in the right order: ",(0,r.kt)("inlineCode",{parentName:"p"},"header")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"footer")," will be built first (and in parallel),\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"remixapp")," will be built after. The order matters because the ",(0,r.kt)("inlineCode",{parentName:"p"},"remixapp")," uses the bundles from the compiled ",(0,r.kt)("inlineCode",{parentName:"p"},"header"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"footer"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \u2714  header:build (501ms)\n    \u2714  footer:build (503ms)\n    \u2714  remixapp:build (670ms)\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n >  Lerna (powered by Nx)   Successfully ran target build for 3 projects (1s)\n\n")),(0,r.kt)("h2",{id:"testing-all-projects"},"Testing All Projects"),(0,r.kt)("p",null,"Now, let's run the tests."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx lerna run test\n")),(0,r.kt)("p",null,"You should see the following output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \u2714  footer:test (1s)\n    \u2714  header:test (1s)\n    \u2714  remixapp:test (236ms)\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n >  Lerna (powered by Nx)   Successfully ran target test for 3 projects (1s)\n")),(0,r.kt)("p",null,"Note, ",(0,r.kt)("inlineCode",{parentName:"p"},"lerna")," will run the three ",(0,r.kt)("inlineCode",{parentName:"p"},"test")," npm scripts in the topological order as well. Although we had to do it when\nbuilding, it isn't necessary for tests (and it also makes the command slower). We can change this behavior by configuring caching."),(0,r.kt)("h2",{id:"caching"},"Caching"),(0,r.kt)("p",null,"Running any command right now will execute all the tasks, every time, even when nothing changes. We can fix it by adding\na bit of configuration."),(0,r.kt)("p",null,"First, let's run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx lerna add-caching\n")),(0,r.kt)("p",null,"A series of questions will be asked to properly configure the workspace:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"? Which scripts need to be run in order? (e.g. before building a project, dependent projects must be built.)\n (Press <space> to select, <a> to toggle all, <i> to invert selection, and <enter> to proceed)\n\u276f\u25c9 build\n \u25ef test\n \u25ef dev\n \u25ef start\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"? Which scripts are cacheable? (Produce the same output given the same input, e.g. build, test and lint usually are, serve and start are not.)\n (Press <space> to select, <a> to toggle all, <i> to invert selection, and <enter> to proceed)\n \u25c9 build\n\u276f\u25c9 test\n \u25ef dev\n \u25ef start\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'? Does the "build" script create any outputs? If not, leave blank, otherwise provide a path relative to a project root (e.g. dist, lib, build,\ncoverage)\n dist\n? Does the "test" script create any outputs? If not, leave blank, otherwise provide a path relative to a project root (e.g. dist, lib, build,\ncoverage)\n')),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"nx.json")," gets generated at the root of your workspace:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="nx.json"',title:'"nx.json"'},'{\n  "tasksRunnerOptions": {\n    "default": {\n      "runner": "nx/tasks-runners/default",\n      "options": {\n        "cacheableOperations": ["build", "test"]\n      }\n    }\n  },\n  "targetDefaults": {\n    "build": {\n      "dependsOn": ["^build"],\n      "outputs": ["{projectRoot}/dist"]\n    }\n  }\n}\n')),(0,r.kt)("p",null,"This configuration caches ",(0,r.kt)("inlineCode",{parentName:"p"},"build")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"test")," tasks and forces ",(0,r.kt)("inlineCode",{parentName:"p"},"build")," to run in topological order (but ",(0,r.kt)("inlineCode",{parentName:"p"},"test")," will not). Also each project's ",(0,r.kt)("inlineCode",{parentName:"p"},"dist")," folder defaults to being cached as the ",(0,r.kt)("inlineCode",{parentName:"p"},"build")," output."),(0,r.kt)("p",null,"Now, let's run tests on the header project twice. The second time the operation will be instant:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx lerna run test --scope=header\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"> lerna run test --scope=header\n\n> header:test  [existing outputs match the cache, left as is]\n\n> header@0.1.0 test\n> jest\n\nPASS  src/Header.spec.tsx\n\u2713 renders header (12 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0.439 s, estimated 1 s\nRan all test suites.\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n>  Lerna (powered by Nx)   Successfully ran target test for project header (4ms)\n\n   Nx read the output from the cache instead of running the command for 1 out of 1 tasks.\n")),(0,r.kt)("p",null,"Lerna was able to recognize that the same command has already executed against the same relevant code and environment. As a result, instead of running the command, Lerna restored the necessary files and replayed the terminal output."),(0,r.kt)("p",null,"Caching not only restores the terminal output logs, but also artifacts that might have been produced. Build all the projects, then remove the remix build folder and run the build command again."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx lerna run build\nrm -rf packages/remixapp/public/build\n")),(0,r.kt)("p",null,"You will see all the files restored from cache and the command executing instantly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \u2714  header:build  [existing outputs match the cache, left as is]\n    \u2714  footer:build  [existing outputs match the cache, left as is]\n    \u2714  remixapp:build  [local cache]\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n >  Lerna (powered by Nx)   Successfully ran target build for 3 projects (19ms)\n\n    Nx read the output from the cache instead of running the command for 3 out of 3 tasks.\n")),(0,r.kt)("p",null,"Lerna automatically recognizes most common output directories (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"dist"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"build"),",...) and captures their content in the cache. As we have seen, we can also customize that output directory, by defining it either globally in the ",(0,r.kt)("inlineCode",{parentName:"p"},"nx.json")," (see the example further up), or on a per project basis in the corresponding ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,r.kt)("p",null,"We can for example fine-tune the configuration of our Remix application by configuring the Remix-specific output path's in the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="packages/remixapp/package.json"',title:'"packages/remixapp/package.json"'},'{\n  "name": "remixapp",\n  ...\n  "dependencies": {...},\n  "devDependencies": {...},\n  "nx": {\n    "targets": {\n      "build": {\n        "outputs": ["{projectRoot}/build", "{projectRoot}/public/build"]\n      }\n    }\n  }\n}\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"{projectRoot}"),' is a special syntax supported by the task-runner, which will be appropriately interpolated internally when the command runs. You should therefore not replace "{projectRoot}" with a fixed path as this makes your configuration less flexible.')),(0,r.kt)("p",null,"Lerna also supports ",(0,r.kt)("a",{parentName:"p",href:"/docs/features/cache-tasks"},"distributed caching")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/features/distribute-tasks"},"config-free distributed task execution"),"."),(0,r.kt)("h2",{id:"target-dependencies-aka-task-pipelines"},"Target Dependencies (aka task pipelines)"),(0,r.kt)("p",null,"We have made good progress, but there is one problem left to be solved. The following configuration in ",(0,r.kt)("inlineCode",{parentName:"p"},"nx.json")," is incomplete:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="nx.json"',title:'"nx.json"'},'{\n  "targetDefaults": {\n    "build": {\n      "dependsOn": ["^build"]\n    }\n  }\n}\n')),(0,r.kt)("p",null,"This ensures that ",(0,r.kt)("inlineCode",{parentName:"p"},"build")," dependencies are run before any ",(0,r.kt)("inlineCode",{parentName:"p"},"build")," command, but we also need to remember to build ",(0,r.kt)("inlineCode",{parentName:"p"},"header")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"footer")," before we run ",(0,r.kt)("inlineCode",{parentName:"p"},"lerna run dev --scope=remixapp"),". We can fix that by defining dependencies between targets (also known as task pipelines) in the ",(0,r.kt)("inlineCode",{parentName:"p"},"nx.json"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="nx.json"',title:'"nx.json"'},'{\n  ...\n  "targetDefaults": {\n    "build": {\n      "dependsOn": [\n        "^build"\n      ]\n    },\n    "dev": {\n      "dependsOn": [\n        "^build"\n      ]\n    }\n  }\n}\n')),(0,r.kt)("p",null,"With this change:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"npx lerna run build")," will run the build targets in the right order."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"npx lerna run dev --scope=remixapp")," will run the build targets for ",(0,r.kt)("inlineCode",{parentName:"li"},"header")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"footer")," first and then run the dev\ntarget for ",(0,r.kt)("inlineCode",{parentName:"li"},"remixapp"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"npx lerna run test")," will run all the three test targets in parallel.")),(0,r.kt)("p",null,"If you are wondering whether it is slow to run ",(0,r.kt)("inlineCode",{parentName:"p"},"lerna run dev --scope=remixapp"),' given that you have to rebuild all the\ndependencies all the time, the answer is "no". The dependencies will be rebuilt only when they change. Otherwise,\ntheir dist folders will be kept as is.'),(0,r.kt)("h2",{id:"publishing"},"Publishing"),(0,r.kt)("p",null,"Finally, let's talk about the third key Lerna feature: publishing to npm. Lerna comes already with a ",(0,r.kt)("inlineCode",{parentName:"p"},"publish")," command\nbuilt-in. To publish our packages ",(0,r.kt)("inlineCode",{parentName:"p"},"header")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"footer"),", all we need to do is to run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx lerna publish --no-private\n")),(0,r.kt)("p",null,"This will"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"determine the current version of the packages"),(0,r.kt)("li",{parentName:"ul"},"detect which packages have changed since the last publishing & then update its version in ",(0,r.kt)("inlineCode",{parentName:"li"},"package.json")," accordingly"),(0,r.kt)("li",{parentName:"ul"},"create a commit of the changed ",(0,r.kt)("inlineCode",{parentName:"li"},"package.json")," files, tag the commit and push the tag & commit to the remote"),(0,r.kt)("li",{parentName:"ul"},"publish the packages to NPM")),(0,r.kt)("p",null,"Read more about the publishing and versioning\nprocess ",(0,r.kt)("a",{parentName:"p",href:"/docs/features/version-and-publish"},"in the corresponding docs page"),"."))}d.isMDXComponent=!0},3749:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/project-graph-e2dd8d0350b7fe58f05fce104c7a6283.png"}}]);