"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[105],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(t),u=a,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||o;return t?i.createElement(h,r(r({ref:n},d),{},{components:t})):i.createElement(h,r({ref:n},d))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var p=2;p<o;p++)r[p]=t[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5823:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var i=t(7462),a=(t(7294),t(3905));const o={id:"hoisting",title:"Legacy: Hoisting",type:"explainer"},r="Legacy: Hoisting",l={unversionedId:"concepts/hoisting",id:"concepts/hoisting",title:"Legacy: Hoisting",description:"NOTE: Lerna's legacy package management capabilities are being deprecated in Lerna v7, please see here for full background",source:"@site/docs/concepts/hoisting.md",sourceDirName:"concepts",slug:"/concepts/hoisting",permalink:"/docs/concepts/hoisting",draft:!1,editUrl:"https://github.com/lerna/lerna/tree/main/website/docs/concepts/hoisting.md",tags:[],version:"current",frontMatter:{id:"hoisting",title:"Legacy: Hoisting",type:"explainer"},sidebar:"main",previous:{title:"Legacy: Alternate Bootstrapping Methods",permalink:"/docs/concepts/alternate-bootstrapping-methods"},next:{title:"Using pnpm with Lerna",permalink:"/docs/recipes/using-pnpm-with-lerna"}},s={},p=[{value:"Disadvantages with hoisting",id:"disadvantages-with-hoisting",level:2},{value:"Module resolution",id:"module-resolution",level:3},{value:"Forgetting dependencies",id:"forgetting-dependencies",level:3}],d={toc:p};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"legacy-hoisting"},"Legacy: Hoisting"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"NOTE: Lerna's legacy package management capabilities are being deprecated in Lerna v7, ",(0,a.kt)("a",{parentName:"p",href:"../features/legacy-package-management"},"please see here for full background"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"lerna bootstrap --hoist\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Use caution when enabling this feature, as certain configurations can cause problems.\nWhen an overall project is divided into more than one NPM package, this\norganizational improvement generally comes with a cost: the various\npackages often have many duplicate dependencies in their ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json"),"\nfiles, and as a result hundreds or thousands of duplicated files in\nvarious ",(0,a.kt)("inlineCode",{parentName:"p"},"node_modules")," directories. By making it easier to manage a\nproject comprised of many NPM packages, Lerna can inadvertently\nexacerbate this problem.")),(0,a.kt)("p",null,'Fortunately, Lerna also offers a feature to improve the situation -\nLerna can reduce the time and space requirements for numerous copies of\npackages in development and build environments, by "hoisting"\ndependencies up to the topmost, Lerna-project-level ',(0,a.kt)("inlineCode",{parentName:"p"},"node_modules"),"\ndirectory instead."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"--hoist")," is intended to be transparent in use, a runtime optimization\nthat ideally does not require any other modifications to a project.\nWhen the ",(0,a.kt)("inlineCode",{parentName:"p"},"--hoist")," flag is used:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Common dependencies will be installed ",(0,a.kt)("em",{parentName:"li"},"only")," to the top-level\n",(0,a.kt)("inlineCode",{parentName:"li"},"node_modules"),", and omitted from individual package ",(0,a.kt)("inlineCode",{parentName:"li"},"node_modules"),"."),(0,a.kt)("li",{parentName:"ul"},"Mostly-common dependencies are still hoisted, but outlier packages\nwith different versions will get a normal, local ",(0,a.kt)("inlineCode",{parentName:"li"},"node_modules"),"\ninstallation of the necessary dependencies.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"In this instance, ",(0,a.kt)("inlineCode",{parentName:"li"},"lerna bootstrap")," will always use ",(0,a.kt)("inlineCode",{parentName:"li"},"npm install"),"\nwith the ",(0,a.kt)("inlineCode",{parentName:"li"},"--global-style")," flag, regardless of client configuration."))),(0,a.kt)("li",{parentName:"ul"},"Binaries from those common packages are symlinked to individual\npackage ",(0,a.kt)("inlineCode",{parentName:"li"},"node_modules/.bin")," directories, so that ",(0,a.kt)("inlineCode",{parentName:"li"},"package.json"),"\nscripts continue to work unmodified."),(0,a.kt)("li",{parentName:"ul"},"Well-behaved Node-based software should continue to work unmodified.")),(0,a.kt)("h2",{id:"disadvantages-with-hoisting"},"Disadvantages with hoisting"),(0,a.kt)("h3",{id:"module-resolution"},"Module resolution"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders"},"Node module resolution algorithm"),"\nis recursive: When looking for package ",(0,a.kt)("inlineCode",{parentName:"p"},"A"),", it looks in a local\n",(0,a.kt)("inlineCode",{parentName:"p"},"node_modules/A")," directory, then in ",(0,a.kt)("inlineCode",{parentName:"p"},"../node_modules/A"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"../../node_modules/A"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"../../../node_modules/A"),", etc."),(0,a.kt)("p",null,"Tooling that follows this specification can transparently find\ndependencies which have been hoisted."),(0,a.kt)("p",null,"Unfortunately, some tooling does not follow the module resolution spec\nclosely, and instead assumes or requires that dependencies are present\nspecifically in the local ",(0,a.kt)("inlineCode",{parentName:"p"},"node_modules")," directory. To work around\nthis, it is possible to symlink packages from their hoisted top-level\nlocation, to individual package ",(0,a.kt)("inlineCode",{parentName:"p"},"node_modules")," directory. Lerna does\nnot yet do this automatically, and it is recommended instead to work\nwith tool maintainers to migrate to more compatible patterns."),(0,a.kt)("h3",{id:"forgetting-dependencies"},"Forgetting dependencies"),(0,a.kt)("p",null,"Lerna will hoist dependencies which are used in multiple projects,\neven if they are not used in all projects."),(0,a.kt)("p",null,"As a result, your packages will be able to import or require any of\nthe dependencies that have been hoisted, even if you ",(0,a.kt)("em",{parentName:"p"},"forgot to\nspecify that dependency")," in your package's ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," file."),(0,a.kt)("p",null,"Tests will pass fine, and you may not realise until later, when you\ntry to use this package outside the monorepo, that some of its\ndependencies are missing."),(0,a.kt)("p",null,"(This problem is not specific to lerna. It can also occur as a result\nof ",(0,a.kt)("a",{parentName:"p",href:"https://medium.com/pnpm/pnpms-strictness-helps-to-avoid-silly-bugs-9a15fb306308"},(0,a.kt)("inlineCode",{parentName:"a"},"npm"),"'s flattening"),".)"),(0,a.kt)("p",null,"To avoid this problem, we can use the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/benmosher/eslint-plugin-import"},"eslint-plugin-import"),"\npackage, which has a rule ",(0,a.kt)("inlineCode",{parentName:"p"},"no-extraneous-dependencies")," that can warn\nwhen an import is made from an unspecified package. It is enabled by\ndefault in the 'recommended' config. Otherwise, we should check by\nhand that all new imports come from packages specified in\n",(0,a.kt)("inlineCode",{parentName:"p"},"package.json"),"."))}c.isMDXComponent=!0}}]);