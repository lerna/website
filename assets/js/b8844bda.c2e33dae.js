"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[362],{7926:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var i=s(4848),t=s(8453);const r={id:"task-pipeline-configuration",title:"Task Pipeline Configuration",type:"explainer"},o="Task Pipeline Configuration",a={id:"concepts/task-pipeline-configuration",title:"Task Pipeline Configuration",description:"Lerna delegates the running of npm scripts (forking processes etc) to Nx. The nx.json file is the place where you can",source:"@site/docs/concepts/task-pipeline-configuration.md",sourceDirName:"concepts",slug:"/concepts/task-pipeline-configuration",permalink:"/docs/concepts/task-pipeline-configuration",draft:!1,unlisted:!1,editUrl:"https://github.com/lerna/lerna/tree/main/website/docs/concepts/task-pipeline-configuration.md",tags:[],version:"current",frontMatter:{id:"task-pipeline-configuration",title:"Task Pipeline Configuration",type:"explainer"},sidebar:"main",previous:{title:"Concepts",permalink:"/docs/concepts"},next:{title:"How Caching Works",permalink:"/docs/concepts/how-caching-works"}},l={},c=[{value:"Run Tasks in Parallel",id:"run-tasks-in-parallel",level:2},{value:"Define Task Dependencies (aka Task Pipelines)",id:"define-task-dependencies-aka-task-pipelines",level:2}];function d(e){const n={admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"task-pipeline-configuration",children:"Task Pipeline Configuration"})}),"\n",(0,i.jsxs)(n.p,{children:["Lerna delegates the running of npm scripts (forking processes etc) to Nx. The ",(0,i.jsx)(n.code,{children:"nx.json"})," file is the place where you can\nconfigure how Nx does it."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["If you don't have ",(0,i.jsx)(n.code,{children:"nx.json"}),", run ",(0,i.jsx)(n.code,{children:"npx lerna add-caching"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"run-tasks-in-parallel",children:"Run Tasks in Parallel"}),"\n",(0,i.jsx)(n.p,{children:"If you want to increase the number of processes running the scripts to, say, 5 (by default, it is 3), pass the\nfollowing:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx lerna run build --concurrency=5\n"})}),"\n",(0,i.jsx)(n.h2,{id:"define-task-dependencies-aka-task-pipelines",children:"Define Task Dependencies (aka Task Pipelines)"}),"\n",(0,i.jsxs)(n.p,{children:["Without our help Lerna cannot know what targets (scripts) have prerequisites and which ones don't. You can define task dependencies in the ",(0,i.jsx)(n.code,{children:"nx.json"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="nx.json"',children:'{\n  ...\n  "targetDefaults": {\n    "build": {\n      "dependsOn": ["^build"]\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"With this, Lerna knows that before it can build a project, it needs to build all of its dependencies first. There are,\nhowever, no constraints on tests."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Once you define the ",(0,i.jsx)(n.code,{children:"targetDefaults"})," property the sort flag is ignored."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This mechanism is very flexible. Let's look at this example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="nx.json"',children:'{\n  ...\n  "targetDefaults": {\n    "build": {\n      "dependsOn": ["^build", "prebuild"]\n    },\n    "test": {\n      "dependsOn": ["build"]\n    }\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Note, older versions of Nx used targetDependencies instead of targetDefaults. Both still work, but targetDefaults is\nrecommended."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"^"})," symbol (a.k.a the caret symbol) simply means dependencies. Therefore whereas ",(0,i.jsx)(n.code,{children:'"test": { "dependsOn": ["build"] }'}),' means a particular project\'s "test" target depends on its own "build" target to have already completed before running, ',(0,i.jsx)(n.code,{children:'"build": { "dependsOn": ["^build"] }'}),' means that a particular project\'s "build" target depends on the "build" target of all of the project\'s dependencies to have already completed before running.']}),"\n",(0,i.jsxs)(n.p,{children:["When running ",(0,i.jsx)(n.code,{children:"lerna run test --scope=myproj"}),", the above configuration would tell Lerna to"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Run the ",(0,i.jsx)(n.code,{children:"test"})," command for ",(0,i.jsx)(n.code,{children:"myproj"})]}),"\n",(0,i.jsxs)(n.li,{children:["But since there's a dependency defined from ",(0,i.jsx)(n.code,{children:"test -> build"}),", Lerna runs ",(0,i.jsx)(n.code,{children:"build"})," for ",(0,i.jsx)(n.code,{children:"myproj"})," first."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"build"})," itself defines a dependency on ",(0,i.jsx)(n.code,{children:"prebuild"})," (on the same project) as well as ",(0,i.jsx)(n.code,{children:"build"})," of all the dependencies.\nTherefore, it will run the ",(0,i.jsx)(n.code,{children:"prebuild"})," script and will run the ",(0,i.jsx)(n.code,{children:"build"})," script for all the dependencies."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Note, Lerna doesn't have to run all builds before it starts running tests. The task orchestrator will run as many tasks\nin parallel as possible as long as the constraints are met."}),"\n",(0,i.jsx)(n.p,{children:"Situations like this are pretty common:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Mixing Targets",src:s(5888).A+"",width:"730",height:"440"})}),"\n",(0,i.jsxs)(n.p,{children:["Because we described the rules in ",(0,i.jsx)(n.code,{children:"nx.json"}),", they will apply to all the projects in the repo. You can also define\nproject-specific rules by adding them the project's ",(0,i.jsx)(n.code,{children:"package.json"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  ...\n  "nx": {\n    "targets": {\n      "test": {\n        "dependsOn": [\n          "build"\n        ]\n      }\n    }\n  }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},5888:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/task-graph-execution-1729feab97c2a7f2879ba3783dd1f518.svg"},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var i=s(6540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);