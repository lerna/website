"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[310],{3905:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>u});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=t.createContext({}),s=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},c=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(a),u=r,h=d["".concat(p,".").concat(u)]||d[u]||m[u]||i;return a?t.createElement(h,l(l({ref:n},c),{},{components:a})):t.createElement(h,l({ref:n},c))}));function u(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3639:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var t=a(7462),r=(a(7294),a(3905));const i={id:"commands",title:"Commands",type:"reference"},l="Commands",o={unversionedId:"api-reference/commands",id:"api-reference/commands",title:"Commands",description:"- lerna publish",source:"@site/docs/api-reference/commands.md",sourceDirName:"api-reference",slug:"/api-reference/commands",permalink:"/docs/api-reference/commands",draft:!1,editUrl:"https://github.com/lerna/lerna/tree/main/website/docs/api-reference/commands.md",tags:[],version:"current",frontMatter:{id:"commands",title:"Commands",type:"reference"},sidebar:"main",previous:{title:"Using pnpm with Lerna",permalink:"/docs/recipes/using-pnpm-with-lerna"},next:{title:"Configuration",permalink:"/docs/api-reference/configuration"}},p={},s=[{value:"Filter Options",id:"filter-options",level:2},{value:"Options",id:"options",level:2},{value:"<code>--scope &lt;glob&gt;</code>",id:"--scope-glob",level:3},{value:"<strong>Running with <code>npx</code></strong>",id:"running-with-npx",level:3},{value:"<code>--ignore &lt;glob&gt;</code>",id:"--ignore-glob",level:3},{value:"<code>--no-private</code>",id:"--no-private",level:3},{value:"<code>--since [ref]</code>",id:"--since-ref",level:3},{value:"<code>--exclude-dependents</code>",id:"--exclude-dependents",level:3},{value:"<code>--include-dependents</code>",id:"--include-dependents",level:3},{value:"<code>--include-dependencies</code>",id:"--include-dependencies",level:3},{value:"<code>--include-merged-tags</code>",id:"--include-merged-tags",level:3}],c={toc:s};function m(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"commands"},"Commands"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lerna/lerna/tree/main/libs/commands/publish#readme"},(0,r.kt)("inlineCode",{parentName:"a"},"lerna publish"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lerna/lerna/tree/main/libs/commands/version#readme"},(0,r.kt)("inlineCode",{parentName:"a"},"lerna version"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lerna/lerna/tree/main/libs/commands/bootstrap#readme"},(0,r.kt)("inlineCode",{parentName:"a"},"lerna bootstrap"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lerna/lerna/tree/main/libs/commands/list#readme"},(0,r.kt)("inlineCode",{parentName:"a"},"lerna list"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lerna/lerna/tree/main/libs/commands/changed#readme"},(0,r.kt)("inlineCode",{parentName:"a"},"lerna changed"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lerna/lerna/tree/main/libs/commands/diff#readme"},(0,r.kt)("inlineCode",{parentName:"a"},"lerna diff"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lerna/lerna/tree/main/libs/commands/exec#readme"},(0,r.kt)("inlineCode",{parentName:"a"},"lerna exec"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lerna/lerna/tree/main/libs/commands/run#readme"},(0,r.kt)("inlineCode",{parentName:"a"},"lerna run"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lerna/lerna/tree/main/libs/commands/init#readme"},(0,r.kt)("inlineCode",{parentName:"a"},"lerna init"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lerna/lerna/tree/main/libs/commands/add#readme"},(0,r.kt)("inlineCode",{parentName:"a"},"lerna add"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lerna/lerna/tree/main/libs/commands/clean#readme"},(0,r.kt)("inlineCode",{parentName:"a"},"lerna clean"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lerna/lerna/tree/main/libs/commands/import#readme"},(0,r.kt)("inlineCode",{parentName:"a"},"lerna import"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lerna/lerna/tree/main/libs/commands/link#readme"},(0,r.kt)("inlineCode",{parentName:"a"},"lerna link"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lerna/lerna/tree/main/libs/commands/create#readme"},(0,r.kt)("inlineCode",{parentName:"a"},"lerna create"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lerna/lerna/tree/main/libs/commands/info#readme"},(0,r.kt)("inlineCode",{parentName:"a"},"lerna info"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lerna/lerna/tree/main/packages/lerna/src/commands/add-caching#readme"},(0,r.kt)("inlineCode",{parentName:"a"},"lerna add-caching"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lerna/lerna/tree/main/packages/lerna/src/commands/repair#readme"},(0,r.kt)("inlineCode",{parentName:"a"},"lerna repair"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lerna/lerna/tree/main/packages/lerna/src/commands/watch#readme"},(0,r.kt)("inlineCode",{parentName:"a"},"lerna watch")))),(0,r.kt)("h2",{id:"filter-options"},"Filter Options"),(0,r.kt)("p",null,"Lerna commands can have filter options applied to control which packages they operate on."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Options for lerna sub-commands that need filtering")),(0,r.kt)("p",null,"Install ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/lerna"},"lerna")," for access to the ",(0,r.kt)("inlineCode",{parentName:"p"},"lerna")," CLI."),(0,r.kt)("h2",{id:"options"},"Options"),(0,r.kt)("h3",{id:"--scope-glob"},(0,r.kt)("inlineCode",{parentName:"h3"},"--scope <glob>")),(0,r.kt)("p",null,"Include only packages with names matching the given glob."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'$ lerna exec --scope my-component -- ls -la\n$ lerna run --scope "toolbar-*" test\n$ lerna run --scope package-1 --scope "*-2" lint\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," For certain globs, it may be necessary to quote the option argument to avoid premature shell expansion."),(0,r.kt)("h3",{id:"running-with-npx"},(0,r.kt)("strong",{parentName:"h3"},"Running with ",(0,r.kt)("inlineCode",{parentName:"strong"},"npx"))),(0,r.kt)("p",null,"When running ",(0,r.kt)("inlineCode",{parentName:"p"},"lerna")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"npx"),', it is necessary to use an explicit "=" when passing glob arguments. This is to prevent ',(0,r.kt)("inlineCode",{parentName:"p"},"npx")," from prematurely expanding the arguments."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'$ npx lerna run --scope="toolbar-*" test\n$ npx lerna run --scope="package-{1,2,5}" test\n')),(0,r.kt)("h3",{id:"--ignore-glob"},(0,r.kt)("inlineCode",{parentName:"h3"},"--ignore <glob>")),(0,r.kt)("p",null,"Exclude packages with names matching the given glob."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'$ lerna exec --ignore "package-{1,2,5}"  -- ls -la\n$ lerna run --ignore package-1 test\n$ lerna run --ignore "package-@(1|2)" --ignore package-3 lint\n')),(0,r.kt)("p",null,"More examples of filtering can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/lerna/lerna/blob/c0a750e0f482c16dda2f922f235861283efbe94d/commands/list/__tests__/list-command.test.js#L305-L356"},"here"),"."),(0,r.kt)("h3",{id:"--no-private"},(0,r.kt)("inlineCode",{parentName:"h3"},"--no-private")),(0,r.kt)("p",null,"Exclude private packages. They are included by default."),(0,r.kt)("h3",{id:"--since-ref"},(0,r.kt)("inlineCode",{parentName:"h3"},"--since [ref]")),(0,r.kt)("p",null,"Only include packages that have been changed since the specified ",(0,r.kt)("inlineCode",{parentName:"p"},"ref"),". If no ref is passed, it defaults to the most-recent tag."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"# List the contents of packages that have changed since the latest tag\n$ lerna exec --since -- ls -la\n\n# Run the tests for all packages that have changed since `main`\n$ lerna run test --since main\n\n# List all packages that have changed since `some-branch`\n$ lerna ls --since some-branch\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"This can be particularly useful when used in CI, if you can obtain the target branch a PR will be going into, because you can use that as the ",(0,r.kt)("inlineCode",{parentName:"em"},"ref")," to the ",(0,r.kt)("inlineCode",{parentName:"em"},"--since")," option. This works well for PRs going into the default branch as well as feature branches.")),(0,r.kt)("h3",{id:"--exclude-dependents"},(0,r.kt)("inlineCode",{parentName:"h3"},"--exclude-dependents")),(0,r.kt)("p",null,"Exclude all transitive dependents when running a command with ",(0,r.kt)("inlineCode",{parentName:"p"},"--since"),', overriding the default "changed" algorithm.'),(0,r.kt)("p",null,"This flag has no effect without ",(0,r.kt)("inlineCode",{parentName:"p"},"--since"),", and will throw an error in that case."),(0,r.kt)("h3",{id:"--include-dependents"},(0,r.kt)("inlineCode",{parentName:"h3"},"--include-dependents")),(0,r.kt)("p",null,"Include all transitive dependents when running a command regardless of ",(0,r.kt)("inlineCode",{parentName:"p"},"--scope"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"--ignore"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"--since"),"."),(0,r.kt)("h3",{id:"--include-dependencies"},(0,r.kt)("inlineCode",{parentName:"h3"},"--include-dependencies")),(0,r.kt)("p",null,"Include all transitive dependencies when running a command regardless of ",(0,r.kt)("inlineCode",{parentName:"p"},"--scope"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"--ignore"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"--since"),"."),(0,r.kt)("p",null,"Used in combination with any command that accepts ",(0,r.kt)("inlineCode",{parentName:"p"},"--scope")," (",(0,r.kt)("inlineCode",{parentName:"p"},"bootstrap"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"clean"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ls"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"run"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"exec"),").\nEnsures that all dependencies (and dev dependencies) of any scoped packages (either through ",(0,r.kt)("inlineCode",{parentName:"p"},"--scope")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"--ignore"),") are operated on as well."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: This will override the ",(0,r.kt)("inlineCode",{parentName:"p"},"--scope")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"--ignore")," flags."),(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("p",{parentName:"blockquote"},"i.e. A package matched by the ",(0,r.kt)("inlineCode",{parentName:"p"},"--ignore")," flag will still be bootstrapped if it is depended on by another package that is being bootstrapped."))),(0,r.kt)("p",null,'This is useful for situations where you want to "set up" a single package that relies on other packages being set up.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ lerna bootstrap --scope my-component --include-dependencies\n# my-component and all of its dependencies will be bootstrapped\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'$ lerna bootstrap --scope "package-*" --ignore "package-util-*" --include-dependencies\n# all packages matching "package-util-*" will be ignored unless they are\n# depended upon by a package whose name matches "package-*"\n')),(0,r.kt)("h3",{id:"--include-merged-tags"},(0,r.kt)("inlineCode",{parentName:"h3"},"--include-merged-tags")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ lerna exec --since --include-merged-tags -- ls -la\n")),(0,r.kt)("p",null,"Include tags from merged branches when running a command with ",(0,r.kt)("inlineCode",{parentName:"p"},"--since"),". This is only useful if you do a lot of publishing from feature branches, which is not generally recommended."))}m.isMDXComponent=!0}}]);